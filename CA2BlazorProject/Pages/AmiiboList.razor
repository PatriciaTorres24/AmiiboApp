@page "/amiibo"
@inject HttpClient Http
@inject NavigationManager NavigationManager


<h3>Nintendo Amiibo List</h3>

<div class="container mt-4">
    <form class="row g-3 mb-3">
        <div class="col-md-4">
            <label for="searchInput" class="form-label">Search Character or Name</label>
            <input id="searchInput" type="text" class="form-control" @bind="searchTerm" placeholder="Enter character or name...">
        </div>
        <div class="col-md-4">
            <label for="gameSeriesInput" class="form-label">Filter by Game Series</label>
            <select id="gameSeriesInput" class="form-select" @bind="selectedGameSeries">
                <option value="">All</option>
                @foreach (var series in gameSeriesList)
                {
                    <option value="@series">@series</option>
                }
            </select>
        </div>
        <div class="col-md-4">
            <label for="releaseDateInput" class="form-label">Released After</label>
            <input id="releaseDateInput" type="date" class="form-control" @bind="releaseDateFilter">
        </div>
        <div class="col-12">
            <button type="button" class="btn btn-primary" @onclick="SearchAmiibos">Search</button>
        </div>
    </form>

</div>

@if (isLoading)
{
    <p>Loading...</p>
}
else if (amiibos == null || !amiibos.Any())
{
    <p>No results found.</p>
}
else
{
    <div class="row">
        @foreach (var amiibo in amiibos)
        {
            <div class="col-sm-3 mb-4">
                <div class="card amiibo-card">
                    <a href="/amiibo/@amiibo.Character" class="text-decoration-none">
                        <img src="@amiibo.Image" alt="@amiibo.Name" class="card-img-top" >
                        <h4 class="text-dark text-center">@amiibo.Name</h4>
                    </a>
                    <div class="card-body">
                        <p class="card-text"><strong>Character:</strong> @amiibo.Character</p>
                        <p class="card-text"><strong>Game Series:</strong> @amiibo.GameSeries</p>
                    </div>
                </div>
            </div>
        }
    </div>

}

@code {
    private string searchTerm = string.Empty;
    private string selectedGameSeries = string.Empty;
    private DateOnly? releaseDateFilter;
    private Amiibo[] allAmiibos;
    private Amiibo[] amiibos;
    private List<string> gameSeriesList = new();
    private bool isLoading = false;


    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        try
        {
            var response = await Http.GetFromJsonAsync<AmiiboApiResponse>("https://www.amiiboapi.com/api/amiibo/");
            allAmiibos = response?.Amiibo;
            amiibos = allAmiibos; // Default to show all Amiibos

            // Populate the Game Series list
            gameSeriesList = allAmiibos.Select(a => a.GameSeries).Distinct().OrderBy(gs => gs).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
        isLoading = false;
    }

    private void SearchAmiibos()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            amiibos = allAmiibos; // Show all if search term is empty
        }
        else
        {
            amiibos = allAmiibos?.Where(a =>
                a.Character.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                a.GameSeries.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                a.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToArray();
        }

        if (!string.IsNullOrWhiteSpace(selectedGameSeries))
        {
            amiibos = amiibos.Where(a => a.GameSeries == selectedGameSeries).ToArray();
        }

        if (releaseDateFilter.HasValue)
        {
            amiibos = amiibos.Where(a =>
                (DateOnly.TryParse(a.Release?.Au, out var auDate) && auDate >= releaseDateFilter.Value) ||
                (DateOnly.TryParse(a.Release?.Eu, out var euDate) && euDate >= releaseDateFilter.Value) ||
                (DateOnly.TryParse(a.Release?.Jp, out var jpDate) && jpDate >= releaseDateFilter.Value) ||
                (DateOnly.TryParse(a.Release?.Na, out var naDate) && naDate >= releaseDateFilter.Value)
            ).ToArray();
        }
    }

   
    public class AmiiboApiResponse
    {
        public Amiibo[] Amiibo { get; set; }
    }

    public class Amiibo
    {
        public string AmiiboSeries { get; set; }
        public string Character { get; set; }
        public string GameSeries { get; set; }
        public string Name { get; set; }
        public string Image { get; set; }
        public string Head { get; set; }


        private Release _release;

        public Release Release
        {
            get => _release;
            set
            {
                _release = value;
                // Add any additional logic when setting Release
            }
        }
    }

    public class Release
    {
        public string Au { get; set; }
        public string Eu { get; set; }
        public string Jp { get; set; }
        public string Na { get; set; }

        public override string ToString()
        {
            return $"AU: {Au}, EU: {Eu}, JP: {Jp}, NA: {Na}";
        }
    }

    private void NavigateToDetails(string amiiboID)
    {
        // Navigate to the movie details page
        NavigationManager.NavigateTo($"/amiibo-details/{amiiboID}");
    }

}

<style>
   .amiibo-card:hover{
       transition: 0.5s;
        transform: scale(1.05);
        box-shadow: 0 10px 20px rgba(0,0,0,.12), 0 4px 8px rgba(0,0,0,.06);
    }
    input, select, button {
        margin-right: 5px;
        margin-bottom: 10px;
    }

</style>

